server:
  port: 9000
  netty:
    connection-timeout: 2s
    idle-timeout: 15s
  shutdown: graceful

spring:
  application:
    name: edge-service
  lifecycle:
    timeout-per-shutdown-phase: 15s
  redis:
    connect-timeout: 2s
    host: localhost
    port: 6379
    timeout: 1s
  cloud:
    gateway:
      httpclient:
        connect-timeout: 2000
        response-timeout: 5s
        pool:
          type: elastic
          # channel idle time limitation, for more: https://projectreactor.io/docs/netty/release/reference/index.html#_connection_pool_2
          max-idle-time: 15s
          # channel total time limitation
          max-life-time: 60s
      routes:
        - id: catalog-route
          uri: ${CATALOG_SERVICE_URL:http://localhost:9001}/books
          predicates:
            - Path=/books/**
          filters:
            # more see: https://docs.spring.io/spring-cloud-gateway/docs/3.1.7/reference/html/#spring-cloud-circuitbreaker-filter-factory
            - name: CircuitBreaker
              args:
                name: catalogCircuitBreaker
                fallbackUri: forward:/catalog-fallback
        - id: order-route
          uri: ${ORDER_SERVICE_URL:http://localhost:9002}/orders
          predicates:
            - Path=/orders/**
          filters:
            - name: CircuitBreaker
              args:
                name: orderCircuitBreaker
      default-filters:
        - name: RequestRateLimiter
          args:
            redis-rate-limiter:
              replenishRate: 10
              burstCapacity: 20
              requestedTokens: 1
        - name: Retry
          args:
            retries: 3
            methods: GET
            series: SERVER_ERROR
            exceptions: java.io.IOException,java.util.concurrent.TimeoutException
            backoff:
              firstBackoff: 50ms
              maxBackOff: 500ms
              factor: 2
              basedOnPreviousValue: false
        - SaveSession
    config:
      uri: "http://localhost:8888"

  session:
    store-type: redis
    timeout: 10m
    redis:
      namespace: polar:edge
  config:
    import: "optional:configserver:"

# for more: https://docs.spring.io/spring-cloud-circuitbreaker/docs/2.1.7/reference/html/#circuit-breaker-properties-configuration
# here should be resilience.cuicuitbreaker in previous spirng official document, YML syntax: https://docs.spring.io/spring-boot/docs/1.1.0.M1/reference/html/boot-features-external-config.html#boot-features-external-config-yaml
resilience4j:
  circuitbreaker:
    configs:
      default:
        # about how calculate failure-rate-threshold, see:
        # link 1: https://stackoverflow.com/questions/71098633/difference-between-sliding-window-size-and-minimum-number-of-calls
        # link 2: https://resilience4j.readme.io/docs/circuitbreaker
        # conclusion: minimum-number-of-calls > sliding-window-size
        sliding-window-size: 20
        failure-rate-threshold: 50
        permitted-number-of-calls-in-half-open-state: 5
        wait-duration-in-open-state: 15000
  timelimiter:
    configs:
      default:
        timeoutDuration: 5s

logging:
  level:
    io.github.resilience4j: DEBUG